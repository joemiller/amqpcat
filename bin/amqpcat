#!/usr/bin/env ruby

$:.unshift(File.dirname(__FILE__) + '/../lib')

require 'optparse'
require 'amqpcat'

options = {}
optparse = OptionParser.new do |opts|
  opts.banner = <<-EOS
Usage: #{$0} [options] amqp-url

  amqp-url format: 'amqp://user:pass@host:port/vhost'

  'amqp'      : required. Either amqp or amqps (SSL)
  'user:pass' : optional. Default: guest:guest
  'host'      : required.
  'port'      : optional. Default: 5672 (amqp), 5671 (amqps)
  'vhost'     : optional. Default: /

Options:
EOS

  opts.on('-h', '--help', 'Display usage') { puts opts; exit 0 }

  options[:mode] = nil
  opts.on('-c', '--consumer', 'Read data from the queue specified by -n and write to STDOUT') do
    options[:mode] = :consumer
  end

  opts.on('-p', '--publisher', 'Read data from STDIN and publish to the exchange specified by -n') do
    options[:mode] = :publisher
  end

  opts.on('-k', '--ssl-key FILE', 'Use SSL key in FILE.') do |f|
    options[:ssl_key] = f
  end

  opts.on('-r', '--ssl-cert FILE', 'Use SSL cert in FILE.') do |f|
    options[:ssl_cert] = f
  end

  options[:verify_ssl] = true
  opts.on('y', '--[no-]verify-ssl', 'Verify server SSL certficiate. (Default: true)') do |y|
    options[:verify_ssl] = y
  end

  options[:prefix] = ''
  opts.on('-s', '--string STRING', "prefix output with STRING") do |s|
     options[:prefix] = s
   end

  options[:once] = false
  opts.on('-o', '--once', "Read/Write one message then exit. (Default: false)") do
    options[:once] = true
  end

  options[:name] = 'amqpcat.default'
  opts.on('-n', '--name NAME', "Queue and Exchange NAME to use. (Default: amqpcat.default)") do |name|
    options[:name] = name
  end

  options[:type] = 'direct'
  opts.on('-t', '--type TYPE', "Exchange type: direct, fanout. (Default: direct)") do |type|
    options[:type] = type
  end

  options[:durable] = true
  opts.on('--[no-]durable', "Enable/Disable durable messages. (Default: durable=true)") do |d|
    options[:durable] = d
  end

  options[:auto_delete] = false
  opts.on('--[no-]auto_delete', "Enable/Disable auto_delete. (Default: auto_delete=false)") do |d|
    options[:auto_delete] = d
  end

  opts.on('--routing-key KEY', "Bind or publish to the exchange with a routing key.") do |k|
    options[:routing_key] = k
  end

end
optparse.parse!

if ARGV.size < 1
  puts "Must specify amqp-url. --help for help"
  exit 1
end

if options[:mode].nil?
  puts "Must specify --consumer or --publisher. --help for help"
  exit 1
end

amqp_url = ARGV[0]
amqpcat = Amqpcat.new(amqp_url, options)

trap 'SIGINT', proc { amqpcat.finish; exit 0 }

case options[:mode]
  when :consumer
    amqpcat.subscribe do |msg|
      $stdout.write options[:prefix] + msg[:payload]
      $stdout.flush
      if options[:once]
         amqpcat.finish
         exit
      end
    end
  when :publisher
    if options[:once]
      amqpcat.publish $stdin.read
    else
      $stdin.each_line { |l| amqpcat.publish(l) }
    end
end

amqpcat.finish
